{"version":3,"sources":["../../src/internal/transformImage.ts"],"names":["transformImage","image","meta","imageOptions","pipeline","reduce","key","args","clone"],"mappings":";;;;;;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,CACrBC,KADqB,EAErBC,IAFqB,EAGrBC,YAHqB,KAIL;AAChB,QAAMC,QAAQ,GAAG,8CAAoBD,YAApB,EAAkCD,IAAlC,CAAjB;AACA,SAAOE,QAAQ,CAACC,MAAT,CAAgB,CAACJ,KAAD,EAAQ,CAACK,GAAD,EAAMC,IAAN,CAAR,KAAwB;AAC7C;AACA;AACA,WAAON,KAAK,CAACK,GAAD,CAAL,CAAW,GAAGC,IAAd,CAAP;AACD,GAJM,EAIJN,KAAK,CAACO,KAAN,EAJI,CAAP;AAKD,CAXD;;eAaeR,c","sourcesContent":["import sharp from 'sharp';\nimport {ImageOptions} from '../types';\nimport {createSharpPipeline} from './createSharpPipeline';\n\n/**\n * Perform a sequence of transformations on an image.\n * @param {Object} image Initial sharp object.\n * @param {Object} meta Some metadata.\n * @param {Object} imageOptions Transformations to apply.\n * @returns {Object} Resulting sharp object.\n */\nconst transformImage = (\n  image: sharp.Sharp,\n  meta: sharp.Metadata,\n  imageOptions: ImageOptions,\n): sharp.Sharp => {\n  const pipeline = createSharpPipeline(imageOptions, meta);\n  return pipeline.reduce((image, [key, args]) => {\n    // TODO: FIXME: Make TypeScript happy.\n    // @ts-expect-error\n    return image[key](...args);\n  }, image.clone());\n};\n\nexport default transformImage;\n"],"file":"transformImage.js"}