"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createImageOptions = exports.normalizeOutputOptions = void 0;

var _cartesianProduct = require("./cartesianProduct");

const allowedImageProperties = ['name', 'scale', 'blur', 'width', 'height', 'mode', 'format', 'inline'];

function multiplex(options) {
  const keys = Object.keys(options);
  const values = keys.map(key => {
    const value = options[key];
    return value;
  });
  const product = (0, _cartesianProduct.cartesianProduct)(values);
  return product.map(entries => {
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    const result = {};
    keys.forEach((key, i) => {
      const value = entries[i];
      result[key] = value;
    });
    return result;
  });
}

const normalizeProperty = (key, value) => {
  switch (key) {
    case 'scale':
    case 'blur':
    case 'width':
    case 'height':
      return parseFloat(value);

    default:
      return value;
  }
};

const normalizeOutputOptions = (options, ...args) => {
  const normalize = (key, val) => {
    if (typeof val === 'function') {
      return normalize(key, val(...args));
    } else if (Array.isArray(val)) {
      if (val.length === 0) {
        return undefined;
      }

      return val.reduce((out, v) => {
        if (typeof v !== 'undefined') {
          return [...out, normalizeProperty(key, v)];
        }

        return out;
      }, []);
    } else if (typeof val !== 'undefined') {
      return [normalizeProperty(key, val)];
    }

    return undefined;
  };

  const keys = Object.keys(options);
  const result = {};
  keys.forEach(key => {
    const out = normalize(key, options[key]);

    if (typeof out !== 'undefined') {
      result[key] = out;
    }
  });
  return result;
};

exports.normalizeOutputOptions = normalizeOutputOptions;

const createImageOptions = (meta, outputOptions) => {
  let newMeta = meta;

  if (typeof outputOptions.meta === 'function') {
    newMeta = outputOptions.meta(meta);
  }

  const base = normalizeOutputOptions(outputOptions, newMeta);
  const config = {};
  allowedImageProperties.forEach(key => {
    if (typeof base[key] !== 'undefined') {
      config[key] = base[key];
    }
  });
  const out = multiplex(config);
  out.forEach(item => {
    // NOTE: Can copy any non-multiplexed values here.
    if (typeof outputOptions.preset === 'string') {
      item.preset = outputOptions.preset;
    }
  });
  return out;
};

exports.createImageOptions = createImageOptions;
//# sourceMappingURL=createImageOptions.js.map