{"version":3,"sources":["../../src/internal/getImageMetadata.ts"],"names":["getImageMetadata","image","resourcePath","cache","cacheMetadataKey","cachedMetadata","readJson","undefined","meta","metadata","writeJson"],"mappings":";;;;;;;AAIO,MAAMA,gBAAgB,GAAG,OAC9BC,KAD8B,EAE9BC,YAF8B,EAG9BC,KAH8B,KAIF;AAC5B,QAAMC,gBAAgB,GAAG,CAAC,MAAD,EAASF,YAAT,CAAzB;AACA,QAAMG,cAAc,GAAG,MAAMF,KAAK,CAACG,QAAN,CAAeF,gBAAf,CAA7B;;AACA,MAAIC,cAAc,KAAKE,SAAvB,EAAkC;AAChC,WAAOF,cAAP;AACD;;AACD,QAAMG,IAAI,GAAG,MAAMP,KAAK,CAACQ,QAAN,EAAnB;AACA,QAAMN,KAAK,CAACO,SAAN,CAAgBN,gBAAhB,EAAkCI,IAAlC,CAAN;AACA,SAAOA,IAAP;AACD,CAbM","sourcesContent":["import {Cache} from './Cache';\n\nimport sharp from 'sharp';\n\nexport const getImageMetadata = async (\n  image: sharp.Sharp,\n  resourcePath: string,\n  cache: Cache,\n): Promise<sharp.Metadata> => {\n  const cacheMetadataKey = ['meta', resourcePath];\n  const cachedMetadata = await cache.readJson(cacheMetadataKey);\n  if (cachedMetadata !== undefined) {\n    return cachedMetadata as sharp.Metadata;\n  }\n  const meta = await image.metadata();\n  await cache.writeJson(cacheMetadataKey, meta);\n  return meta;\n};\n"],"file":"getImageMetadata.js"}