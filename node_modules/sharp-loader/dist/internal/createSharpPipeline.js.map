{"version":3,"sources":["../../src/internal/createSharpPipeline.ts"],"names":["createSharpPipeline","options","meta","result","resize","width","height","Math","round","undefined","scale","TypeError","mode","fit","push","format","rawFormat","formatOptions"],"mappings":";;;;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,mBAAmB,GAAG,CACjCC,OADiC,EAEjCC,IAFiC,KAGf;AAClB,QAAMC,MAAqB,GAAG,EAA9B;AACA,MAAIC,MAAkC,GAAG,IAAzC,CAFkB,CAIlB;;AACA,MAAI,OAAOH,OAAO,CAACI,KAAf,KAAyB,QAAzB,IAAqC,OAAOJ,OAAO,CAACK,MAAf,KAA0B,QAAnE,EAA6E;AAC3EF,IAAAA,MAAM,GAAG;AACPC,MAAAA,KAAK,EACH,OAAOJ,OAAO,CAACI,KAAf,KAAyB,QAAzB,GACIE,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACI,KAAnB,CADJ,GAEII,SAJC;AAKPH,MAAAA,MAAM,EACJ,OAAOL,OAAO,CAACK,MAAf,KAA0B,QAA1B,GACIC,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACK,MAAnB,CADJ,GAEIG;AARC,KAAT;AAUD,GAhBiB,CAkBlB;;;AACA,MAAI,OAAOR,OAAO,CAACS,KAAf,KAAyB,QAA7B,EAAuC;AACrC,QAAI,OAAOR,IAAI,CAACG,KAAZ,KAAsB,QAAtB,IAAkC,OAAOH,IAAI,CAACI,MAAZ,KAAuB,QAA7D,EAAuE;AACrE,YAAM,IAAIK,SAAJ,EAAN;AACD;;AACD,UAAMD,KAAK,GAAGT,OAAO,CAACS,KAAtB;AACA,UAAML,KAAK,GACTD,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAM,CAACC,KAAd,KAAwB,QAA3C,GACID,MAAM,CAACC,KADX,GAEIH,IAAI,CAACG,KAHX;AAIA,UAAMC,MAAM,GACVF,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAM,CAACE,MAAd,KAAyB,QAA5C,GACIF,MAAM,CAACE,MADX,GAEIJ,IAAI,CAACI,MAHX;AAIAF,IAAAA,MAAM,GAAG;AACPC,MAAAA,KAAK,EAAEE,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAGK,KAAnB,CADA;AAEPJ,MAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWF,MAAM,GAAGI,KAApB;AAFD,KAAT;AAID;;AAED,MAAIN,MAAM,KAAK,IAAf,EAAqB;AACnB;AACA,YAAQH,OAAO,CAACW,IAAhB;AACE,WAAK,OAAL;AACER,QAAAA,MAAM,CAACS,GAAP,GAAa,OAAb;AACA;;AACF,WAAK,SAAL;AACET,QAAAA,MAAM,CAACS,GAAP,GAAa,SAAb;AACA;;AACF;AACE;AACA;AATJ;AAWD;;AAED,MAAIT,MAAM,KAAK,IAAf,EAAqB;AACnBD,IAAAA,MAAM,CAACW,IAAP,CAAY,CAAC,QAAD,EAAW,CAACV,MAAD,CAAX,CAAZ;AACD;;AAED,QAAM;AAACW,IAAAA,MAAM,EAAEC,SAAS,GAAGd,IAAI,CAACa;AAA1B,MAAoCd,OAA1C;AACA,QAAM,CAACc,MAAD,EAASE,aAAT,IAA0B,8BAAYD,SAAZ,CAAhC;AACAb,EAAAA,MAAM,CAACW,IAAP,CAAY,CAAC,UAAD,EAAa,CAACC,MAAD,EAASE,aAAT,CAAb,CAAZ;AAEA,SAAOd,MAAP;AACD,CAjEM","sourcesContent":["import sharp from 'sharp';\n\nimport type {ImageOptions, SharpPipeline} from '../types';\n\nimport {parseFormat} from './parseFormat';\n\n/**\n * Take some configuration options and transform them into a format that\n * `transform` is capable of using.\n * @param {Object} options Generic configuration options.\n * @param {Object} meta Image metadata about original image from sharp.\n * @returns {Object} `transform` compatible options.\n */\nexport const createSharpPipeline = (\n  options: ImageOptions,\n  meta: sharp.Metadata,\n): SharpPipeline => {\n  const result: SharpPipeline = [];\n  let resize: sharp.ResizeOptions | null = null;\n\n  // Sizing\n  if (typeof options.width === 'number' || typeof options.height === 'number') {\n    resize = {\n      width:\n        typeof options.width === 'number'\n          ? Math.round(options.width)\n          : undefined,\n      height:\n        typeof options.height === 'number'\n          ? Math.round(options.height)\n          : undefined,\n    };\n  }\n\n  // Multiplicative scale\n  if (typeof options.scale === 'number') {\n    if (typeof meta.width !== 'number' || typeof meta.height !== 'number') {\n      throw new TypeError();\n    }\n    const scale = options.scale;\n    const width =\n      resize !== null && typeof resize.width === 'number'\n        ? resize.width\n        : meta.width;\n    const height =\n      resize !== null && typeof resize.height === 'number'\n        ? resize.height\n        : meta.height;\n    resize = {\n      width: Math.round(width * scale),\n      height: Math.round(height * scale),\n    };\n  }\n\n  if (resize !== null) {\n    // Mimic background-size\n    switch (options.mode) {\n      case 'cover':\n        resize.fit = 'cover';\n        break;\n      case 'contain':\n        resize.fit = 'contain';\n        break;\n      default:\n        // FIXME: Implement this again.\n        break;\n    }\n  }\n\n  if (resize !== null) {\n    result.push(['resize', [resize]]);\n  }\n\n  const {format: rawFormat = meta.format} = options;\n  const [format, formatOptions] = parseFormat(rawFormat);\n  result.push(['toFormat', [format, formatOptions]]);\n\n  return result;\n};\n"],"file":"createSharpPipeline.js"}