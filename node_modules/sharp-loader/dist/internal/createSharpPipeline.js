"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSharpPipeline = void 0;

var _parseFormat = require("./parseFormat");

/**
 * Take some configuration options and transform them into a format that
 * `transform` is capable of using.
 * @param {Object} options Generic configuration options.
 * @param {Object} meta Image metadata about original image from sharp.
 * @returns {Object} `transform` compatible options.
 */
const createSharpPipeline = (options, meta) => {
  const result = [];
  let resize = null; // Sizing

  if (typeof options.width === 'number' || typeof options.height === 'number') {
    resize = {
      width: typeof options.width === 'number' ? Math.round(options.width) : undefined,
      height: typeof options.height === 'number' ? Math.round(options.height) : undefined
    };
  } // Multiplicative scale


  if (typeof options.scale === 'number') {
    if (typeof meta.width !== 'number' || typeof meta.height !== 'number') {
      throw new TypeError();
    }

    const scale = options.scale;
    const width = resize !== null && typeof resize.width === 'number' ? resize.width : meta.width;
    const height = resize !== null && typeof resize.height === 'number' ? resize.height : meta.height;
    resize = {
      width: Math.round(width * scale),
      height: Math.round(height * scale)
    };
  }

  if (resize !== null) {
    // Mimic background-size
    switch (options.mode) {
      case 'cover':
        resize.fit = 'cover';
        break;

      case 'contain':
        resize.fit = 'contain';
        break;

      default:
        // FIXME: Implement this again.
        break;
    }
  }

  if (resize !== null) {
    result.push(['resize', [resize]]);
  }

  const {
    format: rawFormat = meta.format
  } = options;
  const [format, formatOptions] = (0, _parseFormat.parseFormat)(rawFormat);
  result.push(['toFormat', [format, formatOptions]]);
  return result;
};

exports.createSharpPipeline = createSharpPipeline;
//# sourceMappingURL=createSharpPipeline.js.map