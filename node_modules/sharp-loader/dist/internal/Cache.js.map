{"version":3,"sources":["../../src/internal/Cache.ts"],"names":["Cache","constructor","cacheDir","undefined","name","getKey","key","getPath","Error","path","join","read","Promise","reject","resolve","fs","readFile","err","data","readBuffer","readJson","JSON","parse","toString","write","value","writeFile","writeBuffer","writeJson","stringify"],"mappings":"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","sourcesContent":["import findCacheDir from 'find-cache-dir';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {hashOptions} from './hashOptions';\n\nexport class Cache {\n  cacheDir: string | undefined;\n\n  constructor({cacheDir}: {cacheDir?: string | boolean | null}) {\n    this.cacheDir =\n      cacheDir === true || cacheDir === undefined\n        ? findCacheDir({name: 'sharp-loader'})\n        : cacheDir === false || cacheDir === null\n        ? undefined\n        : cacheDir;\n  }\n\n  getKey(key: unknown): string {\n    return hashOptions(key);\n  }\n\n  getPath(key: unknown): string {\n    if (typeof this.cacheDir !== 'string') {\n      throw new Error();\n    }\n    return path.join(this.cacheDir, this.getKey(key));\n  }\n\n  async read(key: unknown): Promise<any> {\n    if (this.cacheDir === undefined) {\n      return await Promise.reject(new Error());\n    }\n    return await new Promise((resolve, reject) => {\n      fs.readFile(this.getPath(key), (err, data) => {\n        err !== null && typeof err !== 'undefined'\n          ? reject(err)\n          : resolve(data);\n      });\n    });\n  }\n\n  async readBuffer(key: unknown): Promise<Buffer | undefined> {\n    try {\n      return await this.read(key);\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  async readJson(key: unknown): Promise<Record<string, any> | undefined> {\n    try {\n      const data = await this.read(key);\n      return JSON.parse(data.toString('utf8'));\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  async write(key: unknown, value: any): Promise<void> {\n    if (this.cacheDir === undefined) {\n      return;\n    }\n    return await new Promise((resolve, reject) => {\n      fs.writeFile(this.getPath(key), value, (err) => {\n        err !== null && typeof err !== 'undefined' ? reject(err) : resolve();\n      });\n    });\n  }\n\n  async writeBuffer(key: unknown, value: Buffer): Promise<void> {\n    try {\n      return await this.write(key, value);\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  async writeJson(key: unknown, value: {}): Promise<void> {\n    try {\n      return await this.write(key, JSON.stringify(value));\n    } catch (err) {\n      return undefined;\n    }\n  }\n}\n"],"file":"Cache.js"}