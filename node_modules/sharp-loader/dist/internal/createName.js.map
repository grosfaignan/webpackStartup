{"version":3,"sources":["../../src/internal/createName.ts"],"names":["extensionMap","jpeg","extension","type","createName","image","info","params","context","loader","template","name","replace","str","test","toString","resourcePath","format","content","Buffer","concat","from","loaderUtils","interpolateName"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB;AAIA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAIC,IAAD,IAA0B;AAAA;;AAC1C,0BAAOH,YAAY,CAACG,IAAD,CAAnB,yDAA2D,IAAGA,IAAK,EAAnE;AACD,CAFD;;AAIA,MAAMC,UAAU,GAAG,CACjBC,KADiB,EAEjBC,IAFiB,EAGjBC,MAHiB,EAIjBC,OAJiB,EAKjBC,MALiB,KAMN;AACX,QAAMC,QAAQ,GAAG,CAAC,OAAOH,MAAM,CAACI,IAAd,KAAuB,QAAvB,GACdJ,MAAM,CAACI,IADO,GAEd,cAFa,EAGfC,OAHe,CAGP,eAHO,EAGU,CAACC,GAAD,EAAcF,IAAd,KAA+B;AACxD,QAAI,gBAAgBG,IAAhB,CAAqBH,IAArB,CAAJ,EAAgC;AAC9B,aAAOE,GAAP;AACD;;AACD,QAAI,OAAON,MAAM,CAACI,IAAD,CAAb,KAAwB,WAA5B,EAAyC;AAAA;;AACvC,6BAAOJ,MAAM,CAACI,IAAD,CAAb,iDAAO,aAAcI,QAAd,EAAP;AACD;;AACD,QAAI,OAAOT,IAAI,CAACK,IAAD,CAAX,KAA0C,WAA9C,EAA2D;AAAA;;AACzD,sBAAOL,IAAI,CAACK,IAAD,CAAX,0CAAO,MAAgCI,QAAhC,EAAP;AACD;;AACD,WAAOF,GAAP;AACD,GAdgB,CAAjB;AAgBA,QAAMG,YAAY,GAAGP,MAAM,CAACO,YAAP,CAClBJ,OADkB,CACV,cADU,EACM,GADN,EAElBA,OAFkB,CAEV,UAFU,EAEEV,SAAS,CAACI,IAAI,CAACW,MAAN,CAFX,CAArB;AAIA,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,CAACD,MAAM,CAACE,IAAP,CAAY,8BAAYd,MAAZ,CAAZ,CAAD,EAAmCF,KAAnC,CAAd,CAAhB;AACA,SAAOiB,qBAAYC,eAAZ,CACL,EACE,GAAGd,MADL;AAEEO,IAAAA;AAFF,GADK,EAKLN,QALK,EAML;AACEQ,IAAAA,OADF;AAEEV,IAAAA;AAFF,GANK,CAAP;AAWD,CAvCD;;eAyCeJ,U","sourcesContent":["import loaderUtils from 'loader-utils';\nimport sharp, {OutputInfo} from 'sharp';\nimport {hashOptions} from './hashOptions';\n\nconst extensionMap = {\n  jpeg: '.jpg',\n} as const;\n\n/**\n * Generate the appropriate extension for a `sharp` format.\n * @param  {String} type `sharp` type.\n * @returns {String} Extension.\n */\nconst extension = (type: string): string => {\n  return extensionMap[type as keyof typeof extensionMap] ?? `.${type}`;\n};\n\nconst createName = (\n  image: Buffer,\n  info: sharp.OutputInfo,\n  params: any,\n  context: string,\n  loader: any,\n): string => {\n  const template = (typeof params.name === 'string'\n    ? params.name\n    : '[hash].[ext]'\n  ).replace(/\\[([^\\]]+)\\]/g, (str: string, name: string) => {\n    if (/^(name|hash)$/.test(name)) {\n      return str;\n    }\n    if (typeof params[name] !== 'undefined') {\n      return params[name]?.toString();\n    }\n    if (typeof info[name as keyof OutputInfo] !== 'undefined') {\n      return info[name as keyof OutputInfo]?.toString();\n    }\n    return str;\n  });\n\n  const resourcePath = loader.resourcePath\n    .replace(/@([0-9]+)x\\./, '.')\n    .replace(/\\.[^.]+$/, extension(info.format));\n\n  const content = Buffer.concat([Buffer.from(hashOptions(params)), image]);\n  return loaderUtils.interpolateName(\n    {\n      ...loader,\n      resourcePath,\n    },\n    template,\n    {\n      content,\n      context,\n    },\n  );\n};\n\nexport default createName;\n"],"file":"createName.js"}