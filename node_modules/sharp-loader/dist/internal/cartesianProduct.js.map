{"version":3,"sources":["../../src/internal/cartesianProduct.ts"],"names":["cartesianProduct","elements","end","length","result","addTo","curr","start","first","last","item","copy","slice","push"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAT,CACLC,QADK,EAEE;AACP,QAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,GAAkB,CAA9B;AACA,QAAMC,MAAa,GAAG,EAAtB;;AAEA,WAASC,KAAT,CAAeC,IAAf,EAA0BC,KAA1B,EAA+C;AAC7C,UAAMC,KAAK,GAAGP,QAAQ,CAACM,KAAD,CAAtB;AACA,UAAME,IAAI,GAAGF,KAAK,KAAKL,GAAvB;;AAEA,SAAK,MAAMQ,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAMG,IAAI,GAAGL,IAAI,CAACM,KAAL,EAAb;AAEAD,MAAAA,IAAI,CAACE,IAAL,CAAUH,IAAV;;AAEA,UAAID,IAAJ,EAAU;AACRL,QAAAA,MAAM,CAACS,IAAP,CAAYF,IAAZ;AACD,OAFD,MAEO;AACLN,QAAAA,KAAK,CAACM,IAAD,EAAOJ,KAAK,GAAG,CAAf,CAAL;AACD;AACF;AACF;;AAED,MAAIN,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvBE,IAAAA,KAAK,CAAC,EAAD,EAAK,CAAL,CAAL;AACD,GAFD,MAEO;AACLD,IAAAA,MAAM,CAACS,IAAP,CAAY,EAAZ;AACD;;AAED,SAAOT,MAAP;AACD","sourcesContent":["/**\n * Compute the cartesian product from a set of sets. Roughly this generates\n * a new set of sets where each member is a set containing one unique\n * combination of elements from each of the input sets.\n * See: https://stackoverflow.com/a/42873141\n * @param {any} elements The set of sets.\n * @returns {any} The cartesian product of `elements`.\n */\nexport function cartesianProduct<T>(\n  elements: readonly (readonly T[])[],\n): T[][] {\n  const end = elements.length - 1;\n  const result: T[][] = [];\n\n  function addTo(curr: T[], start: number): void {\n    const first = elements[start];\n    const last = start === end;\n\n    for (const item of first) {\n      const copy = curr.slice();\n\n      copy.push(item);\n\n      if (last) {\n        result.push(copy);\n      } else {\n        addTo(copy, start + 1);\n      }\n    }\n  }\n\n  if (elements.length > 0) {\n    addTo([], 0);\n  } else {\n    result.push([]);\n  }\n\n  return result;\n}\n"],"file":"cartesianProduct.js"}