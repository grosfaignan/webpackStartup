"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cache = void 0;

var _findCacheDir = _interopRequireDefault(require("find-cache-dir"));

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _hashOptions = require("./hashOptions");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Cache {
  constructor({
    cacheDir
  }) {
    this.cacheDir = cacheDir === true || cacheDir === undefined ? (0, _findCacheDir.default)({
      name: 'sharp-loader'
    }) : cacheDir === false || cacheDir === null ? undefined : cacheDir;
  }

  getKey(key) {
    return (0, _hashOptions.hashOptions)(key);
  }

  getPath(key) {
    if (typeof this.cacheDir !== 'string') {
      throw new Error();
    }

    return path.join(this.cacheDir, this.getKey(key));
  }

  async read(key) {
    if (this.cacheDir === undefined) {
      return await Promise.reject(new Error());
    }

    return await new Promise((resolve, reject) => {
      fs.readFile(this.getPath(key), (err, data) => {
        err !== null && typeof err !== 'undefined' ? reject(err) : resolve(data);
      });
    });
  }

  async readBuffer(key) {
    try {
      return await this.read(key);
    } catch (err) {
      return undefined;
    }
  }

  async readJson(key) {
    try {
      const data = await this.read(key);
      return JSON.parse(data.toString('utf8'));
    } catch (err) {
      return undefined;
    }
  }

  async write(key, value) {
    if (this.cacheDir === undefined) {
      return;
    }

    return await new Promise((resolve, reject) => {
      fs.writeFile(this.getPath(key), value, err => {
        err !== null && typeof err !== 'undefined' ? reject(err) : resolve();
      });
    });
  }

  async writeBuffer(key, value) {
    try {
      return await this.write(key, value);
    } catch (err) {
      return undefined;
    }
  }

  async writeJson(key, value) {
    try {
      return await this.write(key, JSON.stringify(value));
    } catch (err) {
      return undefined;
    }
  }

}

exports.Cache = Cache;
//# sourceMappingURL=Cache.js.map